for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
keep <- p.adjust(res$p.value,method="fdr",n=n)<=alpha
pairs <- rbind(pairs,res[keep,1:2]);
}
nrow(pairs)
duplicated(pairs)
uniq_pairs <- pairs[!duplicated(pairs),]
nrow(uniq_pairs)
library(data.table);
## load marker data
markers <- fread("./markers_lab.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=9,ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
colnames(zs) <- region;
hc.eqtl <- hclust(as.dist((1-cor(t(zs)))/2),method="complete");
install.packages('data.table')
library(data.table);
## load marker data
markers <- fread("./markers_lab.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=9,ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
colnames(zs) <- region;
hc.eqtl <- hclust(as.dist((1-cor(t(zs)))/2),method="complete");
library(data.table);
## load marker data
markers <- fread("./markers.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=9,ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
colnames(zs) <- region;
hc.eqtl <- hclust(as.dist((1-cor(t(zs)))/2),method="complete")
warnings()
dim(zs)
zs
?hclust
uniq_pairs[1,]
n <- 26493*N_markers; # tests per brain region
pairs <- matrix(NA,nrow=0,ncol=2);
for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
keep <- p.adjust(res$p.value,method="fdr",n=n)<=alpha
pairs <- rbind(pairs,res[keep,]);
}
pairs[1,]
uniq_pairs <- pairs[!duplicated(pairs),]
nrow(uniq_pairs)
uniq_pairs <- pairs[!duplicated(pairs[,1:2]),]
nrow(uniq_pairs)
uniq_pairs[1,]
pairs <- matrix(NA,nrow=0,ncol=2);
region <- c("FCTX","OCTX");
for(r in region){
res <- read.table(paste("./res_lab_",r,".txt",sep=""),
header=TRUE);
keep <- res$p.value<=5e-6;
pairs <- rbind(pairs,res[keep,1:2]);
}
pairs <- pairs[!duplicated(pairs),]
nrow(uniq_pairs)
markers <- fread("./markers.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=nrow(uniq_pairs),ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
getwd()
markers <- fread("./markers.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=nrow(uniq_pairs),ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
r
library(data.table);
expr <- fread(paste("./expr_",r,".txt",sep=""));
?fread
rm(list=ls())
setwd('~/Homework/STAT_530/HW2/')
# install.packages('MatrixEQTL')
# system('gunzip *.gz')
library(MatrixEQTL)
#######################################
## Problem 4 ##########################
## find most significant eQTLs
for (r in region){
fname <- paste("./res_",r,".txt",sep="");
res <- read.table(fname,header=TRUE);
print(res[which.min(res$p.value),c('SNP', "gene",'p.value')]);
}
useModel = modelLINEAR;
# Genotype file name
SNP_file_name = "./markers.txt"
## Load genotype data
snps = SlicedData$new();
snps$fileDelimiter = "\t";      # the TAB character
snps$fileOmitCharacters = "NA"; # denote missing values;
snps$fileSkipRows = 1;          # one row of column labels
snps$fileSkipColumns = 1;       # one column of row labels
snps$fileSliceSize = 2000;      # read file in slices of 2,000 rows
snps$LoadFile(SNP_file_name);
## load and analyze expression data
region <- c("CRBL", "FCTX",
"HIPP", "MEDU",
"OCTX", "PUTM",
"SNIG", "TCTX",
"THAL", "WHMT");
system('grep -nr -m 1 t expr_FCTX.txt | cut -d : -f 1') # find the first non-exon line
for (r in region){
fname <- paste("./res_",r,".txt",sep="");
res <- read.table(fname,header=TRUE);
print(res[which.min(res$p.value),c('SNP', "gene",'p.value')]);
}
test <- read.delim("./markers.txt")
N_markers <- nrow(test)
rm(test)
n <- 26493*N_markers; # tests per brain region
alpha <- 0.01; # alpha level specified in HW
for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
cat(r,":",sum(p.adjust(res$p.value,method="fdr",n=n)<=alpha),"\n");
}
test <- read.delim("./markers.txt")
N_markers <- nrow(test)
rm(test)
## unpooled
n <- 26493*N_markers; # tests per brain region
alpha <- 0.01; # alpha level specified in HW
tot <- 0
for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
cur <- sum(p.adjust(res$p.value,method="fdr",n=n)<=alpha)
tot = tot + cur
cat(r,":",cur,"\n");
}
tot
## pooled
p <- c();
for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
p <- c(p,res$p.value);
}
n <- 26493*N_markers*length(region) # tests per region * num. regions
sum(p.adjust(p,method="fdr",n=n)<=alpha);
n <- 26493*N_markers; # tests per brain region
pairs <- matrix(NA,nrow=0,ncol=2);
for(r in region){
res <- read.table(paste("./res_",r,".txt",sep=""),
header=TRUE);
keep <- p.adjust(res$p.value,method="fdr",n=n)<=alpha
pairs <- rbind(pairs,res[keep,]);
}
uniq_pairs <- pairs[!duplicated(pairs[,1:2]),]
nrow(uniq_pairs)
library(data.table);
## load marker data
markers <- fread("./markers.txt");
setkey(markers,"id");
## store absolute z-scores
zs <- matrix(NA,nrow=nrow(uniq_pairs),ncol=0);
zs <- matrix(NA,nrow=nrow(uniq_pairs),ncol=0);
for(r in region){
## load expression data
expr <- fread(paste("./expr_",r,".txt",sep=""));
setkey(expr,"ExprID");
zs <- cbind(zs,apply(uniq_pairs,1,function(x){
g <- as.numeric(expr[x[2],-1,with=F]);
s <- as.numeric(markers[x[1],-1,with=F]);
p <- summary(lm(g~s))$coef[2,4];
return(-qnorm(p/2));
}));
}
colnames(zs) <- region;
hc.eqtl <- hclust(as.dist((1-cor(t(zs)))/2),method="complete");
install.packages('gplots')
library(gplots);
heatmap.2(zs,Rowv=as.dendrogram(hc.eqtl),
labRow=FALSE,
col=bluered(50),key=TRUE,density.info="none",trace="none",cexCol=1);
hc.eqtl <- hclust(as.dist((1-cor(t(zs)))/2),method="complete");
clust <- cutree(hc.eqtl,k=3);
table(clust);
head(uniq_pairs)
trans <- sapply(as.character(uniq_pairs[clust==2,"gene"]),function(x){
substr(x,2,nchar(x));
});
str(trans)
trans
clust
clust==2
trans
unique(trans)
table(clust);
for (i in 1:3){
trans <- sapply(as.character(uniq_pairs[clust==i,"gene"]),function(x){
substr(x,2,nchar(x));
});
fname <- paste('cluster', i, ".txt", sep='')
write.table(unique(trans),file=fname,
row.names=FALSE,col.names=FALSE,quote=FALSE)
}
for (i in 1:3){
trans <- sapply(as.character(uniq_pairs[clust==i,"gene"]),function(x){
substr(x,2,nchar(x));
});
cat('Unique Genes in Cluster', i,":", length(trans))
fname <- paste('cluster', i, ".txt", sep='')
write.table(unique(trans),file=fname,
row.names=FALSE,col.names=FALSE,quote=FALSE)
}
for (i in 1:3){
trans <- sapply(as.character(uniq_pairs[clust==i,"gene"]),function(x){
substr(x,2,nchar(x));
});
cat('\nUnique Genes in Cluster', i,":", length(trans))
fname <- paste('cluster', i, ".txt", sep='')
write.table(unique(trans),file=fname,
row.names=FALSE,col.names=FALSE,quote=FALSE)
}
for (i in 1:3){
trans <- sapply(as.character(uniq_pairs[clust==i,"gene"]),function(x){
substr(x,2,nchar(x));
});
cat('\nUnique Genes in Cluster', i,":", length(unique(trans)))
fname <- paste('cluster', i, ".txt", sep='')
write.table(unique(trans),file=fname,
row.names=FALSE,col.names=FALSE,quote=FALSE)
}
unique(trans)
uniq_pairs[1,]
summary(cars)
setwd("~/gitrepos/dkmehrmann.github.io/_R")
;s
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
setwd("~/gitrepos/dkmehrmann.github.io/")
knit_folder("_R", "_posts", "figs/", "_caches/")
#!/usr/bin/Rscript --vanilla
setwd(".")
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#!/usr/bin/Rscript --vanilla
setwd(".")
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#!/usr/bin/Rscript --vanilla
setwd(".")
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
#!/usr/bin/Rscript --vanilla
setwd(".")
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
library(ggplot2)
hist.ggplot <- ggplot(cars, aes(x=mpg)) + geom_histogram(binwidth=1)
hist.ggplot
hist.ggplot
dim(cars)
dim(mtcars)
library(ggplot2)
hist.ggplot <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1)
hist.ggplot
dev.off()
library(ggplot2)
hist.ggplot <- ggplot(mtcars, aes(x=mpg)) + geom_histogram(binwidth=1)
hist.ggplot
#!/usr/bin/Rscript --vanilla
setwd(".")
# compiles all .Rmd files in _R directory into .md files in Pages directory,
# if the input file is older than the output file.
# run ./knitpages.R to update all knitr files that need to be updated.
KnitPost <- function(input, outfile, figsfolder, cachefolder, base.url="/") {
# this function is a modified version of an example here:
# http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(figsfolder, sub(".Rmd$", "", basename(input)), "/")
cache.path <- file.path(cachefolder, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(cache.path = cache.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, outfile, envir = parent.frame())
}
knit_folder <- function(infolder, outfolder, figsfolder, cachefolder) {
for (infile in list.files(infolder, pattern = "*.Rmd", full.names = TRUE)) {
pattern = "\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\\-"
print(infile)
# folder = ifelse(grepl(pattern, infile), outfolder, "pages")
outfile = paste0(outfolder, "/", sub(".Rmd$", ".md", basename(infile)))
print(outfile)
# knit only if the input file is the last one modified
if (!file.exists(outfile) |
file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile, figsfolder, cachefolder)
}
}
}
knit_folder("_R", "_posts", "figs/", "_caches/")
#knit_folder("_R/drafts", "_drafts", "figs/drafts/")
?ggplotly
install.packages('plotly')
install.packages("plotly")
install.packages('plotly')
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
library(ggplot2)
